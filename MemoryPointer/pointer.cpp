/*

c++ 에서 * 기호는 용법이 총 3가지이다. 

1. 이항 연산자로 사용 할 때 : 곱셈
2. 포인터 타입으로 선언할 때
3. 역참조 메모리를 기반으로 변수에 값에 접근할 때
번외 : 긴 주석 쓸때(이건 /까지 포함이니까 애매하긴 함)


메모리의 관리는 언어마다 다르게 동작하는데, 자바 같은 경우 사용자가 직접 메모리를 할당하거나 해제할 수 없고, 가비지 컬렉터가 이 역할을 대신 수행한다.
포인터란? : 메모리의 주소를 담는 타입을 포인터라고 한다.
*/

// 포인터 예제

#include <bits/stdc++.h>
using namespace std;

// int main() {

//     int a = 5;
//     int *b = &a;

//     cout << b << '\n';
// }

/*
포인트의 크기는 환경마다 달라지지만, 주소의 크기는 동일하기 때문에 관련이 없다.
*/

// 역참조 연산자

/*
위에서 알아본 것은 포인터 타입의 변수 b에 a의 메모리 주소를 불러온 것 근데 이제 역참조를 걸어 주소값을 기반으로 값을 꺼낼 수 있음
*/


int main() {

   string a = "abcda"; 
   string *b = &a; 
   cout << b << "\n"; 
   cout << *b << "\n"; 
   return 0;
}

// array to pointer decay

/*

array to pointer decay는 말 그대로 배열을 포인터로 바인딩 할때 해당 배열의 크기 정보가 decay(부식)되는 것

배열 형식이 포인터로 부식될 때, 배열의 첫번째 원소를 가리키는데, 아래의 코드를 살펴보면 다음을 확인할 수 있다.

cout << c << "\n"; a의 포인터인 * c는  cout << &a[0] << "\n";의 결과 값과 같은 값을 출력한다.


*/


int a[3] = {1, 2, 3}; 

int main(){
    int * c = a;
    cout << c << "\n"; 
    cout << &a[0] << "\n"; 
    cout << c + 1 << "\n"; 
    cout << &a[1] << "\n"; 
    return 0;
}